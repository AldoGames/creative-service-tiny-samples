var vel = velocity2d.velocity();
if(vel.length() < 20)
{
	if(die.result() === 0)
	{
		var resultIndex = getRandomInt(0,die.resultFaces().length-1);
		var resultFace = die.resultFaces()[resultIndex];

		die.animEntity().removeComponent(ut.Core2D.Sprite2DSequencePlayer);

    	var sprite2drenderer = die.animEntity().getComponent(ut.Core2D.Sprite2DRenderer);
    	if(sprite2drenderer != null)
    	{
			sprite2drenderer.setSprite(resultFace);
		}

		die.setResult(resultIndex+1);
	}
}

if(die.result() === 0)
{
	velocity2d.setVelocity(vel.lerp(new Vector2(0,0), sched.deltaTime() * .2));
}else
{
	velocity2d.setVelocity(vel.lerp(new Vector2(0,0), sched.deltaTime() * 2));
}

if(vel.length() > 0)
{
    // set the angle of the die to the direction of the die movement since that is how they are animated.
    var angle = Math.atan2(vel.y, vel.x) * (180/Math.PI) - 90;

    // need to convert to rads for Quaternion().setFromEuler until it is switched to accept degrees 
    var radAngle = Math.PI*angle/180;

    var worldRotation = new Quaternion().setFromEuler(new ut.Math.Euler(0,0,radAngle));
    die.animEntity().getComponent(ut.Core2D.Transform).setWorldRotation(worldRotation);
}


/**
 * @todo move to random class
 */
function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}